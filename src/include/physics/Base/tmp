/*enum class ComponentManagerType {};

	template <
		typename T,
		typename I,
		typename ObjBase,
		typename CompBase,
		typename CompTypeBase,
		size_t MAX_COMPONENTS,
		size_t MAX_OBJECTS,
		ComponentManagerType Type>
	struct ComponentManager
	{
		struct Object : public ObjBase {
			public:
				I id = 0;
				Object() = default;
				Object(T* p, I id) : id(id), p(p) {}
				inline operator I() const noexcept {
					return id;
				}
	
				inline bool operator==(const Object& rhs) const noexcept
				{
					return id == rhs.id;
				}
	
				inline bool operator!=(const Object& rhs) const noexcept
				{
					return id != rhs.id;
				}
	
				inline T& Parent() const noexcept
				{
					return *p;
				}
	
				template <typename C>
				inline C& Get() const noexcept
				{
					return p->template component<C>(*this);
				}
	
				template <typename C>
				inline std::optional<C*> Opt() const noexcept
				{
					return p->template opt_component<C>(*this);
				}
	
				template <typename C>
				inline bool Has() const noexcept
				{
					return p->template has_component<C>(*this);
				}
	
				template <typename C>
				inline C& Add(C&& component = C()) const noexcept
				{
					static_assert(std::is_base_of_v<BaseComponent, C>);
					return p->add_component(*this, std::forward<C>(component));
				}
	
				template <typename C>
				inline void Remove() const noexcept
				{
					return p->template remove_component<C>(*this);
				}
	
				template <typename _ = T>
				inline void Destroy() const noexcept
				{
					p->Destroy(*this);
				}
	
				// template <typename _ = T>
				// inline auto& level() const noexcept
				// {
				// 	return p->level;
				// }
				inline auto& Signature() const noexcept
				{
					return p->signatures[id];
				}
			private:
				T* p = nullptr;
		};

		// descriptor for a component type
		struct ComponentType : public CompTypeBase
		{
			u64 id;
			size_t size;
			template <typename C>
			static inline ComponentType From(ComponentManager* system, u64 id)
			{
				ComponentType result;
				result.id = id;
				result.size = sizeof(C);
				return result;
			}
		};

		struct BaseComponent : public CompBase
		{
			u8 block = 0;
			BaseComponent() = default;
			BaseComponent(const BaseComponent& other) = delete;
			BaseComponent(BaseComponent&& other) = default;
			BaseComponent& operator=(const BaseComponent& other) = delete;
			BaseComponent& operator=(BaseComponent&& other) = default;
			virtual ~BaseComponent() = default;

			virtual void Init() {};
		};

		template <typename C> 
		struct Component : public BaseComponent
		{
			static u64 _id;
			static T* _p;
			inline Object Object() const noexcept
			{
				return Parent().template object_from_component<C>(
					reinterpret_cast<const void*>(this));
			}

			inline T& Parent() const noexcept
			{
				return *Component<C>::_p;
			}
		};

		struct ComponentArray
		{
			static constexpr auto BLOCK_SIZE = 512;
			static constexpr auto NUM_BLOCKS = (MAX_OBJECTS / BLOCK_SIZE) + 1;
			struct Block
			{
				const ComponentArray* parent = nullptr;
				std::unique_ptr<u8[]> data = nullptr;
				Block() = default;
				
				Block(const ComponentArray* parent, size_t n) noexcept
				: parent(parent)
				{
					const auto data_size = BLOCK_SIZE * parent->type->size;
					data = std::unique_ptr<u8[]>(
						new (std::align_val_t(16)) u8[data_size]);
					std::memset(data.get(), 0, data_size);
				}

				inline BaseComponent* operator[](size_t i) const noexcept
				{
					static_assert(i < BLOCK_SIZE);
					return
						reinterpret_cast<BaseComponent*>(
							reinterpret_cast<u8*>(data.get())
							+ (parent->type->size * i));
				}

				inline size_t ToIndex(const void* p) const noexcept
				{
					return static_cast<size_t>(
						(reinterpret_cast<const u8*>(p) - 
						reinterpret_cast<const u8*>(data.get()))
						/ parent->type->size);
				}
			};

			ComponentType* type = nullptr;
			Block blocks[NUM_BLOCKS];
			size_t n_blocks = 0;
			ComponentArray() = default;
			ComponentArray(ComponentType* type) : type(type) {}

			void Resize(size_t n) noexcept
			{
				while (n > (n_blocks * BLOCK_SIZE))
				{
					static_assert(n_blocks != NUM_BLOCKS);
					blocks[n_blocks] = Block(this, n_blocks);
					n_blocks++;
				}
			}

			inline u32 block(size_t i) const noexcept
			{
				return i / BLOCK_SIZE;
			}

			inline BaseComponent* operator[](size_t i) const noexcept
			{
				return blocks[i / BLOCK_SIZE][i % BLOCK_SIZE];
			}

			inline size_t ToIndex(const void* p) const noexcept
			{
				const auto* c = reinterpret_cast<const BaseComponent*>(p);
				return size_t(c->block * BLOCK_SIZE)
					+ blocks[c->block].ToIndex(p);
			}
		};

		using ComponentRegistry = TypeRegistry<T, Component<BaseComponent()>>;
		template <typename U>
		using ComponentRegister = TypeRegister<ComponentRegistry, U>;

		size_t n_components = 0;
		size_t size = 0;
		std::vector<u64> signatures;
		std::array<ComponentArray, MAX_COMPONENTS> components;
		std::array<ComponentType, MAX_COMPONENTS> componentTypes;
		ComponentManager() {Resize(256);}
		ComponentManager(const ComponentManager& other) = delete;
		ComponentManager(ComponentManager&& other) = default;
		ComponentManager& operator=(const ComponentManager& other) = delete;
		ComponentManager& operator=(ComponentManager&& other) = default;
		virtual ~ComponentManager() = default;
		template <typename V>
		void RegisterType() noexcept
		{
			const u64 id = n_components++;
			static_assert(n_components <= MAX_COMPONENTS, "Maximum amount of components reached.");
			Component<V>::_id = id;
			V::_p = static_cast<T*>(this);
			componentTypes[id] = ComponentType::template from<V>(this, id);
			components[id] = ComponentArray(&componentTypes[id]);
			components[id].Resize(size);
			V::on_register();
		}
	};*/